#!/usr/bin/with-contenv bashio
# ==============================================================================
# Home Assistant Community Add-on: LiveKit Server
# Configures LiveKit based on user settings
# ==============================================================================

readonly CONFIG_FILE="/etc/livekit/livekit.yaml"

bashio::log.info "Configuring LiveKit server..."

# Create config directory
mkdir -p /etc/livekit

# Read configuration values
DOMAIN=$(bashio::config 'domain')
HTTP_PORT=$(bashio::config 'http_port')
RTC_TCP_PORT=$(bashio::config 'rtc_tcp_port')
UDP_PORT_MIN=$(bashio::config 'rtc_udp_port_min')
UDP_PORT_MAX=$(bashio::config 'rtc_udp_port_max')
API_KEY=$(bashio::config 'api_key')
API_SECRET=$(bashio::config 'api_secret')
USE_SSL=$(bashio::config 'use_ssl')
CERT_FILE=$(bashio::config 'cert_file')
PKEY_FILE=$(bashio::config 'pkey_file')
TURN_ENABLED=$(bashio::config 'turn_enabled')
TURN_USERNAME=$(bashio::config 'turn_username')
TURN_PASSWORD=$(bashio::config 'turn_password')
TURN_STATIC_AUTH_SECRET=$(bashio::config 'turn_static_auth_secret')
LOG_LEVEL=$(bashio::config 'log_level')
VERBOSE=$(bashio::config 'verbose')
EXTERNAL_IP=$(bashio::config 'external_ip')
USE_ICE_LITE=$(bashio::config 'use_ice_lite')

# Start building configuration file
bashio::log.info "Generating LiveKit configuration file..."

cat > "${CONFIG_FILE}" << EOF
# LiveKit Server Configuration
# Generated by Home Assistant Add-on

port: ${HTTP_PORT}
EOF

# Add protocol configuration
if bashio::var.true "${USE_SSL}" && bashio::var.has_value "${CERT_FILE}" && bashio::var.has_value "${PKEY_FILE}"; then
    if bashio::fs.file_exists "/ssl/${CERT_FILE}" && bashio::fs.file_exists "/ssl/${PKEY_FILE}"; then
        cat >> "${CONFIG_FILE}" << EOF

# HTTPS/WSS Configuration
cert_file: /ssl/${CERT_FILE}
key_file: /ssl/${PKEY_FILE}
EOF
    fi
fi

# RTC Configuration
cat >> "${CONFIG_FILE}" << EOF

# RTC Configuration
rtc:
  tcp_port: ${RTC_TCP_PORT}
  port_range_start: ${UDP_PORT_MIN}
  port_range_end: ${UDP_PORT_MAX}
  use_external_ip: true
EOF

# Add external IP if specified
if bashio::var.has_value "${EXTERNAL_IP}"; then
    cat >> "${CONFIG_FILE}" << EOF
  external_ip: "${EXTERNAL_IP}"
EOF
fi

# ICE Lite configuration
if bashio::var.true "${USE_ICE_LITE}"; then
    cat >> "${CONFIG_FILE}" << EOF
  ice_lite: true
EOF
fi

# Note: ICE servers (TURN/STUN) configuration will be added in a future version
# For now, LiveKit will work without TURN servers for direct connections
if bashio::var.true "${TURN_ENABLED}"; then
    bashio::log.info "TURN server integration configured but not yet implemented in LiveKit config"
    bashio::log.info "LiveKit will work for direct connections, TURN support coming soon"
fi

# Authentication keys
cat >> "${CONFIG_FILE}" << EOF

# Authentication Keys
keys:
  ${API_KEY}: ${API_SECRET}
EOF


# Logging configuration
if bashio::var.true "${VERBOSE}"; then
    LOG_LEVEL="debug"
fi

cat >> "${CONFIG_FILE}" << EOF

# Logging Configuration
log_level: ${LOG_LEVEL}
EOF

# Webhook configuration
WEBHOOK_URLS=$(bashio::config 'webhook_urls')
if bashio::var.has_value "${WEBHOOK_URLS}" && [[ "${WEBHOOK_URLS}" != "[]" ]]; then
    cat >> "${CONFIG_FILE}" << EOF

# Webhook Configuration
webhook:
  urls:
EOF
    for webhook in $(bashio::config 'webhook_urls'); do
        cat >> "${CONFIG_FILE}" << EOF
    - "${webhook}"
EOF
    done
fi

# Development mode (only if verbose logging is enabled)
if bashio::var.true "${VERBOSE}"; then
    cat >> "${CONFIG_FILE}" << EOF

# Development settings
development: true
EOF
fi

# Set proper ownership
chown livekit:livekit "${CONFIG_FILE}"
chmod 640 "${CONFIG_FILE}"

bashio::log.info "LiveKit configuration file generated successfully"

# Log configuration summary (without sensitive data)
bashio::log.info "Configuration summary:"
bashio::log.info "  Domain: ${DOMAIN}"
bashio::log.info "  HTTP Port: ${HTTP_PORT}"
bashio::log.info "  RTC TCP Port: ${RTC_TCP_PORT}"
bashio::log.info "  UDP Port Range: ${UDP_PORT_MIN}-${UDP_PORT_MAX}"
bashio::log.info "  SSL Enabled: ${USE_SSL}"
bashio::log.info "  TURN Enabled: ${TURN_ENABLED}"
bashio::log.info "  Log Level: ${LOG_LEVEL}"

if bashio::var.true "${VERBOSE}"; then
    bashio::log.info "Generated configuration file:"
    cat "${CONFIG_FILE}"
fi
